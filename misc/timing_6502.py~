#!/usr/bin/env python
# 
# Copyright (c) 2015 C64 Demo Project
# 
from sys import argv, exit
from collections import namedtuple
from re import compile, DOTALL

__description__ = "Instruction timing for MOS 6502"
__version__ = "0.1"

# Representation of the different timings for a specific instruction.
TimedInstruction = namedtuple(
    "TimedInstruction", [
        "accumulator",              # 1
        "implied",                  # 2
        "immediate",                # 3
        "absolute",                 # 4
        "zero_page",                # 5
        "relative",                 # 6
        "absolute_x",               # 7
        "absolute_y",               # 8
        "zero_page_idx_x",          # 9
        "zero_page_idx_y",          # 10
        "zero_page_idx_indirect_x", # 11
        "zero_page_idx_indirect_y"  # 12
        ])
        

INSTRUCTIONS = {
    "adc" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- (A) + M + C
    "anc" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- A /\ M, C <- ~A7
    "and" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- (A) /\ M
    "ane" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <-[(A)\/$EE] /\ (X)/\(M)
    "arr" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- [(A /\ M) >> 1]
    "asl" : TimedInstruction(2, None, None, 6, 5, None, 7, None, 6, None, None, None),   #  C <- A7, A <- (A) << 1
    "asr" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- [(A /\ M) >> 1]
    "bcc" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  if C=0, PC = PC + offset
    "bcs" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  if C=1, PC = PC + offset
    "beq" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  if Z=1, PC = PC + offset
    "bit" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Z <- ~(A /\ M) N<-M7 V<-M6
    "bmi" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  if N=1, PC = PC + offset
    "bne" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  if Z=0, PC = PC + offset
    "bpl" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  if N=0, PC = PC + offset
    "brk" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Stack <- PC, PC <- ($fffe)
    "bvc" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  if V=0, PC = PC + offset
    "bvs" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  if V=1, PC = PC + offset
    "clc" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  C <- 0
    "cld" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  D <- 0
    "cli" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  I <- 0
    "clv" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  V <- 0
    "cmp" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  (A - M) -> NZC
    "cpx" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  (X - M) -> NZC
    "cpy" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  (Y - M) -> NZC
    "dcp" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (M)-1, (A-M) -> NZC
    "dec" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (M) - 1
    "dex" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  X <- (X) - 1
    "dey" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Y <- (Y) - 1
    "eor" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- (A) \-/ M
    "inc" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (M) + 1
    "inx" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  X <- (X) +1
    "iny" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Y <- (Y) + 1
    "isb" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (M) - 1,A <- (A)-M-~C
    "jmp" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  PC <- Address
    "jmpi" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  (PC <- Address)
    "jsr" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Stack <- PC, PC <- Address
    "lae" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  X,S,A <- (S /\ M)
    "lax" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- M, X <- M
    "lda" : TimedInstruction(None, None, 2, 4, 3, None, 4, 4, 4, None, 6, 5),   #  A <- M
    "ldx" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  X <- M
    "ldy" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Y <- M
    "lsr" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  C <- A0, A <- (A) >> 1
    "lxa" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  X04 <- (X04) /\ M04, A04 <- (A04) /\ M04
    "nop" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  [no operation]
    "ora" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- (A) V M
    "pha" : TimedInstruction(None, 3, None, None, None, None, None, None, None, None, None, None),   #  Stack <- (A)
    "php" : TimedInstruction(None, 3, None, None, None, None, None, None, None, None, None, None),   #  Stack <- (P)
    "pla" : TimedInstruction(None, 4, None, None, None, None, None, None, None, None, None, None),   #  A <- (Stack)
    "plp" : TimedInstruction(None, 4, None, None, None, None, None, None, None, None, None, None),   #  A <- (Stack)
    "rla" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (M << 1) /\ (A)
    "rol" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  C <- A7 & A <- A << 1 + C
    "ror" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  C<-A0 & A<- (A7=C + A>>1)
    "rra" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (M >> 1) + (A) + C
    "rti" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  P <- (Stack), PC <-(Stack)
    "rts" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  PC <- (Stack)
    "sax" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (A) /\ (X)
    "sbc" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- (A) - M - ~C
    "sbx" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  X <- (X)/\(A) - M
    "sec" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  C <- 1
    "sed" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  D <- 1
    "sei" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  I <- 1
    "sha" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (A) /\ (X) /\ (PCH+1)
    "shs" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  X <- (A) /\ (X), S <- (X), M <- (X) /\ (PCH+1)
    "shx" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (X) /\ (PCH+1)
    "shy" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (Y) /\ (PCH+1)
    "slo" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (M >> 1) + A + C
    "sre" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (M >> 1) \-/ A
    "sta" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (A)
    "stx" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (X)
    "sty" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  M <- (Y)
    "tax" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  X <- (A)
    "tay" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Y <- (A)
    "tsx" : TimedInstruction(None, 2, None, None, None, None, None, None, None, None, None, None),   #  X <- (S)
    "txa" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- (X)
    "txs" : TimedInstruction(None, 2, None, None, None, None, None, None, None, None, None, None),   #  S <- (X)
    "tya" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  A <- (Y)
    "bbr0" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 0 reset
    "bbr1" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 1 reset
    "bbr2" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 2 reset
    "bbr3" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 3 reset
    "bbr4" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 4 reset
    "bbr5" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 5 reset
    "bbr6" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 6 reset
    "bbr7" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 7 reset
    "bbs0" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 0 set
    "bbs1" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 1 set
    "bbs2" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 2 set
    "bbs3" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 3 set
    "bbs4" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 4 set
    "bbs5" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 5 set
    "bbs6" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 6 set
    "bbs7" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Branch if bit 7 set
    "rmb0" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Reset memory bit 0
    "rmb1" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Reset memory bit 1
    "rmb2" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Reset memory bit 2
    "rmb3" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Reset memory bit 3
    "rmb4" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Reset memory bit 4
    "rmb5" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Reset memory bit 5
    "rmb6" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Reset memory bit 6
    "rmb7" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Reset memory bit 7
    "smb0" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Set memory bit 0
    "smb1" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Set memory bit 1
    "smb2" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Set memory bit 2
    "smb3" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Set memory bit 3
    "smb4" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Set memory bit 4
    "smb5" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Set memory bit 5
    "smb6" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Set memory bit 6
    "smb7" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),  #  Set memory bit 7
    "stz" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Store zero
    "tsb" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Test and set bits
    "trb" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Test and reset bits
    "phy" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Push Y register
    "ply" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Pull Y register
    "phx" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Push X register
    "plx" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Pull X register
    "bra" : TimedInstruction(None, None, None, None, None, None, None, None, None, None, None, None),   #  Branch always
    }


class DecodedInstruction(object):
    """Simple assembly decoded instruction for further manipulation."""

    def __init__(self, mnem):
        self.mnem = mnem

    @property
    def mnem(self):
        """String representing the instruciton mnemonic."""
        return self._mnem

    @mnem.setter
    def mnem(self, mnem):
        """Store string represention of the instruciton mnemonic."""
        self._mnem = mnem

    @property
    def operand_str(self):
        """String representing the instruciton operand_str."""
        return self._operand_str

    @operand_str.setter
    def operand_str(self, operand_str):
        """Store string represention of the instruciton operand_str."""
        self._operand_str = operand_str

    @property
    def operand_type(self):
        """String representing the instruciton operand."""
        return self._operand_type

    @operand_type.setter
    def operand_type(self, operand_type):
        """Store string represention of the instruciton operand."""
        self._operand_type = operand_type


class MOS6502TimmingException(Exception):
    """Default exception for MOS 6502 timing class."""
    pass


class MOS6502Timming(object):
    """Instructions timing for processor MOS 6502."""

    def __init__(self):
        self.absolute_idx_x_re = compile("\$\w+,[X]", DOTALL) # Absolute Indexed X
        self.absolute_idx_y_re = compile("\$\w+,[Y]", DOTALL) # Absolute Indexed Y
        self.zero_page_idx_ind_x_re = compile("\(\$\w+,[X]\)", DOTALL) # Zero Page Indexed Indirect X
        self.zero_page_idx_ind_y_re = compile("\(\$\w+\),[Y]", DOTALL) # Zero Page Indexed Indirect Y
        self.zero_page_idx_x_re = compile("\$\w+,[X]", DOTALL) # Zero Page Indexed X
        self.zero_page_idx_y_re = compile("\$\w+,[Y]", DOTALL) # Zero Page Indexed Y

    def _decode_inst(self, asm):
        """Parse the assembly line containing the instruciton being timed and split it for a meaningful usage."""
        return None

    def time_instruction(self, asm):
        """Return the timing for the instruction at the specified address."""
        # Fetch the instruction and then lookup the timing table for the timing.
        decoded_inst = self._decode_inst(asm)

        if not decoded_inst:
            raise MOS6502TimmingException("Unable to decode instruction (%s)" % asm)

        # Make sure that we know the instruction being timed.
        if decoded_inst.mnem not in INSTRUCTIONS:
            raise MOS6502TimmingException("Unknown instruction %s" % decoded_inst.mnem)

        # Obtain the instruction timing information, determine the addressing mode and return its timing value.
        inst = INSTRUCTIONS[decoded_inst.mnem]
        operand_type = decoded_inst.operand_type

        # Determine operand information from the operands at the current instruction.
        #
        # Type 1. Accumulator
        #
        if operand_type == o_void:
            #if op.reg == 0: # A
            return inst.accumulator

        #
        # Type 2. Implicit
        #
        elif operand_type == o_imm:
            return inst.immediate

        #
        # Type 3. Immediate
        #
        elif operand_type == o_void:
            return inst.implied

        # Type 4. Absolute
        # Type 5. Relative
        elif operand_type in [o_mem, o_far, o_near]:

            # TODO : Differentiate between absolute and zero page (size?)
            return inst.absolute

        elif operand_type == o_displ:
            # Type 6. Absolute Indexed X
            if self.absolute_idx_x_re.match(decoded_inst.operand_str):
                return inst.absolute_x

            # Type 7. Absolute Indexed Y
            elif self.absolute_idx_y_re.match(decoded_inst.operand_str):
                return inst.absolute_y

            # Type 8. Zero Page Indexed X
            elif self.zero_page_idx_ind_x_re.match(decoded_inst.operand_str):
                return inst.zero_page_idx_indirect_x

            # Type 9. Zero Page Indexed Y
            elif self.zero_page_idx_ind_y_re.match(decoded_inst.operand_str):
                return inst.zero_page_idx_indirect_y

            # Type 11. Zero Page Indexed Indirect X
            elif self.zero_page_idx_x_re.match(decoded_inst.operand_str):
                return inst.zero_page_idx_x

            # Type 12. Zero Page Indexed Indirect Y
            elif self.zero_page_idx_y_re.match(decoded_inst.operand_str):
                return inst.zero_page_idx_y

        raise MOS6502TimmingException(
            "Unknown operand type (%d): %s" % (
            decoded_inst.operand_type, decoded_inst.operand_str))

def main():
    print "%s v%s\n" % (__description__, __version__)

    try:
        # Initialize the timing instance.
        tim = MOS6502Timming()

        asm = """
                ASL     A               ; accumulator
                TXA                     ; implicit
                LDA     #$22 ; '"'      ; immediate
                LDX     $D010           ; absolute
                LDY     loc_2           ; zero page (1 byte)
                BPL     loc_1A8         ; relative
                ADC     $307A,X         ; Absolute Indexed with X
                ADC     $307A,Y         ; Absolute Indexed with Y
                LDA     1,X             ; Zero Page Indexed with X
                LDA     1,Y             ; N/D
                STA     ($15,X)         ; Zero Page Indexed Indirect X
                LDA     ($15),Y         ; Zero Page Indexed Indirect Y
                """
        cycles = tim.time_assembly(asm)

        if cycles is not None:
            print "[+] Cycles : %d" % cycles
        else:
            print "[+] No cycles information available."

    except MOS6502TimmingException, err:
        print "[-] Exception : %s" % err

if __name__ == "__main__":
    main()
